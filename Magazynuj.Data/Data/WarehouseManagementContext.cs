// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Magazynuj.Data.Models;

namespace Magazynuj.Data.Data
{
    public partial class WarehouseManagementContext : DbContext
    {
        public WarehouseManagementContext()
        {
        }

        public WarehouseManagementContext(DbContextOptions<WarehouseManagementContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AdditionalRemuneration> AdditionalRemuneration { get; set; }
        public virtual DbSet<AdditionalRemunerationType> AdditionalRemunerationType { get; set; }
        public virtual DbSet<Adres> Adres { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ClientType> ClientType { get; set; }
        public virtual DbSet<Commodity> Commodity { get; set; }
        public virtual DbSet<CommodityCategory> CommodityCategory { get; set; }
        public virtual DbSet<CommodityDetails> CommodityDetails { get; set; }
        public virtual DbSet<CommodityDimensions> CommodityDimensions { get; set; }
        public virtual DbSet<CommodityMark> CommodityMark { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyDetail> CompanyDetail { get; set; }
        public virtual DbSet<CompanyLocation> CompanyLocation { get; set; }
        public virtual DbSet<ContractData> ContractData { get; set; }
        public virtual DbSet<Contractor> Contractor { get; set; }
        public virtual DbSet<ContractorDetail> ContractorDetail { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DataAces> DataAces { get; set; }
        public virtual DbSet<DefaultPaymentMethod> DefaultPaymentMethod { get; set; }
        public virtual DbSet<DefaultPriceList> DefaultPriceList { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Discount> Discount { get; set; }
        public virtual DbSet<DiscountType> DiscountType { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<FixedAssets> FixedAssets { get; set; }
        public virtual DbSet<FixedAssetsType> FixedAssetsType { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceType> InvoiceType { get; set; }
        public virtual DbSet<LoyaltyCard> LoyaltyCard { get; set; }
        public virtual DbSet<MaritalStatus> MaritalStatus { get; set; }
        public virtual DbSet<OfficeKeys> OfficeKeys { get; set; }
        public virtual DbSet<OrderTab> OrderTab { get; set; }
        public virtual DbSet<OrderType> OrderType { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentType> PaymentType { get; set; }
        public virtual DbSet<PayrollClient> PayrollClient { get; set; }
        public virtual DbSet<PersonalData> PersonalData { get; set; }
        public virtual DbSet<Remuneration> Remuneration { get; set; }
        public virtual DbSet<ShiftHours> ShiftHours { get; set; }
        public virtual DbSet<ShiftSupervisor> ShiftSupervisor { get; set; }
        public virtual DbSet<ShiftType> ShiftType { get; set; }
        public virtual DbSet<StoragePlace> StoragePlace { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<VacationDays> VacationDays { get; set; }
        public virtual DbSet<VacationSchedule> VacationSchedule { get; set; }
        public virtual DbSet<VacationType> VacationType { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }
        public virtual DbSet<WarehouseReceipts> WarehouseReceipts { get; set; }
        public virtual DbSet<WorkType> WorkType { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=LAPTOP-6K6T4R49\\WAREHOUSE;Initial Catalog=WarehouseManagement;Integrated Security=True;TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AdditionalRemuneration>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<AdditionalRemunerationType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Adres>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Adres)
                    .WithMany(p => p.Bank)
                    .HasForeignKey(d => d.AdresId)
                    .HasConstraintName("FK_Bank_Adres");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ClientType)
                    .WithMany(p => p.Client)
                    .HasForeignKey(d => d.ClientTypeId)
                    .HasConstraintName("FK_Client_ClientType");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.Client)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK_Client_Gender");

                entity.HasOne(d => d.MaritalStatus)
                    .WithMany(p => p.Client)
                    .HasForeignKey(d => d.MaritalStatusId)
                    .HasConstraintName("FK_Client_MaritalStatus");

                entity.HasOne(d => d.PersonalData)
                    .WithMany(p => p.Client)
                    .HasForeignKey(d => d.PersonalDataId)
                    .HasConstraintName("FK_Client_PersonalData");
            });

            modelBuilder.Entity<ClientType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Commodity>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.CommodityCategory)
                    .WithMany(p => p.Commodity)
                    .HasForeignKey(d => d.CommodityCategoryId)
                    .HasConstraintName("FK_Commodity_CommodityCategory");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Commodity)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Commodity_Employee");
            });

            modelBuilder.Entity<CommodityCategory>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<CommodityDetails>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.CommodityDimentions)
                    .WithMany(p => p.CommodityDetails)
                    .HasForeignKey(d => d.CommodityDimentionsId)
                    .HasConstraintName("FK_CommodityDetails_CommodityDimensions");

                entity.HasOne(d => d.CommodityMark)
                    .WithMany(p => p.CommodityDetails)
                    .HasForeignKey(d => d.CommodityMarkId)
                    .HasConstraintName("FK_CommodityDetails_CommodityMark");

                entity.HasOne(d => d.StoragePlace)
                    .WithMany(p => p.CommodityDetails)
                    .HasForeignKey(d => d.StoragePlaceId)
                    .HasConstraintName("FK_CommodityDetails_StoragePlace");
            });

            modelBuilder.Entity<CommodityDimensions>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<CommodityMark>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Adres)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.AdresId)
                    .HasConstraintName("FK_Company_Adres");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_Company_Bank");

                entity.HasOne(d => d.CompanyDetail)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.CompanyDetailId)
                    .HasConstraintName("FK_Company_CompanyDetail");

                entity.HasOne(d => d.Contractor)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.ContractorId)
                    .HasConstraintName("FK_Company_Contractor");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Company_Country");
            });

            modelBuilder.Entity<CompanyDetail>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<CompanyLocation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.OfficeKey)
                    .WithMany(p => p.CompanyLocation)
                    .HasForeignKey(d => d.OfficeKeyId)
                    .HasConstraintName("FK_CompanyLocation_OfficeKeys");
            });

            modelBuilder.Entity<ContractData>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.ContractData)
                    .HasForeignKey<ContractData>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractData_Supplier");
            });

            modelBuilder.Entity<Contractor>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Adres)
                    .WithMany(p => p.Contractor)
                    .HasForeignKey(d => d.AdresId)
                    .HasConstraintName("FK_Contractor_Adres");

                entity.HasOne(d => d.ContractorDetail)
                    .WithMany(p => p.Contractor)
                    .HasForeignKey(d => d.ContractorDetailId)
                    .HasConstraintName("FK_Contractor_ContractorDetail");

                entity.HasOne(d => d.PersonalData)
                    .WithMany(p => p.Contractor)
                    .HasForeignKey(d => d.PersonalDataId)
                    .HasConstraintName("FK_Contractor_PersonalData");
            });

            modelBuilder.Entity<ContractorDetail>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.ContractorDetail)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_ContractorDetail_Bank");

                entity.HasOne(d => d.DefaultPaymentMethod)
                    .WithMany(p => p.ContractorDetail)
                    .HasForeignKey(d => d.DefaultPaymentMethodId)
                    .HasConstraintName("FK_ContractorDetail_DefaultPaymentMethod");

                entity.HasOne(d => d.DefaultPriceList)
                    .WithMany(p => p.ContractorDetail)
                    .HasForeignKey(d => d.DefaultPriceListId)
                    .HasConstraintName("FK_ContractorDetail_DefaultPriceList");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ContractorDetail)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_ContractorDetail_Discount");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<DataAces>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<DefaultPaymentMethod>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<DefaultPriceList>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.CompanyLocation)
                    .WithMany(p => p.Department)
                    .HasForeignKey(d => d.CompanyLocationId)
                    .HasConstraintName("FK_Department_CompanyLocation");
            });

            modelBuilder.Entity<Discount>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ClientType)
                    .WithMany(p => p.Discount)
                    .HasForeignKey(d => d.ClientTypeId)
                    .HasConstraintName("FK_Discount_ClientType");

                entity.HasOne(d => d.DiscountType)
                    .WithMany(p => p.Discount)
                    .HasForeignKey(d => d.DiscountTypeId)
                    .HasConstraintName("FK_Discount_DiscountType");
            });

            modelBuilder.Entity<DiscountType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Employee_Department");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.Employee)
                    .HasForeignKey<Employee>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Warehouse");

                entity.HasOne(d => d.PersonalData)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.PersonalDataId)
                    .HasConstraintName("FK_Employee_PersonalData");

                entity.HasOne(d => d.Remuneration)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.RemunerationId)
                    .HasConstraintName("FK_Employee_Remuneration");

                entity.HasOne(d => d.WorkType)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.WorkTypeId)
                    .HasConstraintName("FK_Employee_WorkType");
            });

            modelBuilder.Entity<FixedAssets>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_FixedAssets_Employee");

                entity.HasOne(d => d.FixedAssetsType)
                    .WithMany(p => p.FixedAssets)
                    .HasForeignKey(d => d.FixedAssetsTypeId)
                    .HasConstraintName("FK_FixedAssets_FixedAssetsType");
            });

            modelBuilder.Entity<FixedAssetsType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GenderName).IsFixedLength();
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_Invoice_Bank");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Invoice_Client");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Invoice_Company");

                entity.HasOne(d => d.Contractor)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.ContractorId)
                    .HasConstraintName("FK_Invoice_Contractor");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Invoice_Discount");

                entity.HasOne(d => d.InvoiceType)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.InvoiceTypeId)
                    .HasConstraintName("FK_Invoice_InvoiceType");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("FK_Invoice_Payment");
            });

            modelBuilder.Entity<InvoiceType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<LoyaltyCard>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CardNumber).IsFixedLength();
            });

            modelBuilder.Entity<MaritalStatus>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<OfficeKeys>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<OrderTab>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.OrderTab)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_OrderTab_Invoice");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderTab)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_OrderTab_OrderType");
            });

            modelBuilder.Entity<OrderType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.PaymentTypeId)
                    .HasConstraintName("FK_Payment_PaymentType");
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.PayrollClient)
                    .WithMany(p => p.PaymentType)
                    .HasForeignKey(d => d.PayrollClientId)
                    .HasConstraintName("FK_PaymentType_PayrollClient");
            });

            modelBuilder.Entity<PayrollClient>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<PersonalData>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Adres)
                    .WithMany(p => p.PersonalData)
                    .HasForeignKey(d => d.AdresId)
                    .HasConstraintName("FK_PersonalData_Adres");
            });

            modelBuilder.Entity<Remuneration>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.AdditionalRemuneration)
                    .WithMany(p => p.Remuneration)
                    .HasForeignKey(d => d.AdditionalRemunerationId)
                    .HasConstraintName("FK_Remuneration_AdditionalRemuneration");
            });

            modelBuilder.Entity<ShiftHours>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ShiftSupervisor>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ShiftSupervisor)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_ShiftSupervisor_Employee");

                entity.HasOne(d => d.ShiftType)
                    .WithMany(p => p.ShiftSupervisor)
                    .HasForeignKey(d => d.ShiftTypeId)
                    .HasConstraintName("FK_ShiftSupervisor_shiftType");
            });

            modelBuilder.Entity<ShiftType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ShiftHours)
                    .WithMany(p => p.ShiftType)
                    .HasForeignKey(d => d.ShiftHoursId)
                    .HasConstraintName("FK_shiftType_ShiftHours");
            });

            modelBuilder.Entity<StoragePlace>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.StoragePlace)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_StoragePlace_Warehouse");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<VacationDays>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.VacationDays)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_VacationDays_Employee");
            });

            modelBuilder.Entity<VacationSchedule>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.VacationSchedule)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_VacationSchedule_Employee");

                entity.HasOne(d => d.VacationType)
                    .WithMany(p => p.VacationSchedule)
                    .HasForeignKey(d => d.VacationTypeId)
                    .HasConstraintName("FK_VacationSchedule_VacationType");
            });

            modelBuilder.Entity<VacationType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Warehouse>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Adres)
                    .WithMany(p => p.Warehouse)
                    .HasForeignKey(d => d.AdresId)
                    .HasConstraintName("FK_Warehouse_Adres");
            });

            modelBuilder.Entity<WarehouseReceipts>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Commodity)
                    .WithMany(p => p.WarehouseReceipts)
                    .HasForeignKey(d => d.CommodityId)
                    .HasConstraintName("FK_WarehouseReceipts_Commodity");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.WarehouseReceipts)
                    .HasForeignKey<WarehouseReceipts>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarehouseReceipts_Supplier");
            });

            modelBuilder.Entity<WorkType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}